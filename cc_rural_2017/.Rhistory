### 1.4.4 Renombre de columnas
names(df_2017_2)[3] <- "Parquet"
names(df_2017_2)[6] <- "Radier"
names(df_2017_2)[9] <- "Baldosa"
ingresos_expandidos_2017 <- readRDS("Ingresos_expandidos_urbano_17.rds")
df_2017_2 = merge( x = comuna_corr, y = ingresos_expandidos_2017, by = "código", all.x = TRUE)
tablamadre <- head(df_2017_2,50)
kbl(tablamadre) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
kable_paper() %>%
scroll_box(width = "100%", height = "300px")
comuna_corr
comuna_corr <- comuna_corr[,-c(3,6,9,12,15),drop=FALSE]
comuna_corr
tabla_con_clave <- readRDS("../censo_viviendas_con_clave_17.rds")
tabla_con_clave <- filter(tabla_con_clave, tabla_con_clave$AREA == 1)
b <- tabla_con_clave$COMUNA
c <- tabla_con_clave$P03C
cross_tab =  xtabs( ~ unlist(b) + unlist(c))
tabla <- as.data.frame(cross_tab)
d <-tabla[!(tabla$Freq == 0),]
d$anio <- "2017"
d_t <- filter(d,d$unlist.c. == 1)
for(i in 2:5){
d_i <- filter(d,d$unlist.c. == i)
d_t = merge( x = d_t, y = d_i, by = "unlist.b.", all.x = TRUE)
}
### 1.4.2 Construcción de un código comunal ad-hoc
#Agregamos un cero a los códigos comunales de 4 dígitos, que queda en la columna llamada código:
codigos <- d_t$
unlist.b.
rango <- seq(1:nrow(d_t))
cadena <- paste("0",codigos[rango], sep = "")
cadena <- substr(cadena,(nchar(cadena)[rango])-(4),6)
codigos <- as.data.frame(codigos)
cadena <- as.data.frame(cadena)
comuna_corr <- cbind(d_t,cadena)
comuna_corr <- comuna_corr[,-c(1),drop=FALSE]
names(comuna_corr)[16] <- "código"
### 1.4.3 Unión con los ingresos comunales expandidos
# Hacemos la unión con los ingresos promedio comunales expandidos:
# comuna_corr
comuna_corr <- comuna_corr[,-c(3,6,9,12,15),drop=FALSE]
comuna_corr
tabla_con_clave <- readRDS("../censo_viviendas_con_clave_17.rds")
tabla_con_clave <- filter(tabla_con_clave, tabla_con_clave$AREA == 1)
b <- tabla_con_clave$COMUNA
c <- tabla_con_clave$P03C
cross_tab =  xtabs( ~ unlist(b) + unlist(c))
tabla <- as.data.frame(cross_tab)
d <-tabla[!(tabla$Freq == 0),]
d$anio <- "2017"
d_t <- filter(d,d$unlist.c. == 1)
for(i in 2:5){
d_i <- filter(d,d$unlist.c. == i)
d_t = merge( x = d_t, y = d_i, by = "unlist.b.", all.x = TRUE)
}
### 1.4.2 Construcción de un código comunal ad-hoc
#Agregamos un cero a los códigos comunales de 4 dígitos, que queda en la columna llamada código:
codigos <- d_t$
unlist.b.
rango <- seq(1:nrow(d_t))
cadena <- paste("0",codigos[rango], sep = "")
cadena <- substr(cadena,(nchar(cadena)[rango])-(4),6)
codigos <- as.data.frame(codigos)
cadena <- as.data.frame(cadena)
comuna_corr <- cbind(d_t,cadena)
comuna_corr <- comuna_corr[,-c(1),drop=FALSE]
names(comuna_corr)[16] <- "código"
### 1.4.3 Unión con los ingresos comunales expandidos
# Hacemos la unión con los ingresos promedio comunales expandidos:
# comuna_corr
comuna_corr <- comuna_corr[,-c(3,6,9,12,15),drop=FALSE]
names(comuna_corr )[2] <- "Parquet"
names(comuna_corr )[4] <- "Radier"
names(comuna_corr )[6] <- "Baldosa"
names(comuna_corr )[8] <- "Capa de cemento"
names(comuna_corr )[10] <- "Tierra"
comuna_corr
casen_2017 <- readRDS(file = "../casen_2017_c.rds")
casen_2017_u <- filter(casen_2017, casen_2017$zona == "Urbano")
casen_2017_u <- casen_2017_u[!is.na(casen_2017_u$ytotcor),]
Q <- quantile(casen_2017_u$ytotcor, probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(casen_2017_u$ytotcor)
casen_2017_sin_o <- subset(casen_2017_u, casen_2017_u$ytotcor >
(Q[1] - 1.5*iqr) &
casen_2017_u$ytotcor < (Q[2]+1.5*iqr))
casen_2017_sin_o <- data.frame(lapply(casen_2017_sin_o, as.character),
stringsAsFactors=FALSE)
b <-  as.numeric(casen_2017_sin_o$ytotcor)
a <- casen_2017_sin_o$comuna
promedios_grupales <-aggregate(b, by=list(a), FUN = mean , na.rm=TRUE )
names(promedios_grupales)[1] <- "comuna"
names(promedios_grupales)[2] <- "promedio_i"
promedios_grupales$año <- "2017"
codigos_comunales <- readRDS(file = "../codigos_comunales_2011-2017.rds")
names(codigos_comunales)[1] <- "código"
names(codigos_comunales)[2] <- "comuna"
df_2017 = merge( x = promedios_grupales, y = codigos_comunales,
by = "comuna",
all.x = TRUE)
df_2017
df_2017_666 = merge( x = df_2017, y = comuna_corr, by = "código",
all.x = TRUE)
df_2017_666
x <- import("../Microdato_Censo2017-Personas.csv")
my_summary_data <- x %>%
group_by(x$COMUNA) %>%
summarise(Count = n())
names(my_summary_data)[1] <- "comuna"
names(my_summary_data)[2] <- "personas"
# recogemos el campo Comuna:
codigos <- my_summary_data$comuna
# construimos una secuencia llamada rango del 1 al total de filas del
# dataset:
rango <- seq(1:nrow(my_summary_data))
# Creamos un string que agrega un cero a todos los registros:
cadena <- paste("0",codigos[rango], sep = "")
# El string cadena tiene o 5 o 6 digitos, los cuales siempre deben ser
# siempre 5
# agregandole un cero al inicio de los que tienen 4.
# Para ello extraemos un substring de la cadena sobre todas las filas
#(rangos)
# comenzando desde el primero o el segundo y llegando siempre al 6.
cadena <- substr(cadena,(nchar(cadena)[rango])-(4),6)
codigos <- as.data.frame(codigos)
cadena <- as.data.frame(cadena)
comuna_corr <- cbind(my_summary_data,cadena)
names(comuna_corr)[3] <- "código"
comuna_corr
df_2017_6666 = merge( x = df_2017_666, y = comuna_corr, by = "código",
all.x = TRUE)
df_2017_6666
df_2017_6666$Ingresos_expandidos <- df_2017_6666$promedio_i*df_2017_2$personas
df_2017_6666$Ingresos_expandidos <- df_2017_6666$promedio_i*df_2017_6666$personas
df_2017_6666
df_2017_6666_subset <- df_2017_6666_subset[,c(6,17)]
df_2017_6666_subset <- df_2017_6666[,c(6,17)]
chart.Correlation(df_2017_6666_subset, histogram=TRUE, method = c( "pearson"), pch=20)
df_2017_6666_subset <- df_2017_6666[,c(6,17)]
chart.Correlation(df_2017_6666_subset, histogram=TRUE, method = c( "spearman"), pch=20)
df_2017_6666_subset <- df_2017_6666[,c(6,17)]
chart.Correlation(df_2017_6666_subset, histogram=TRUE, method = c( "kendall"), pch=20)
df_2017_6666_subset <- df_2017_6666[,c(6,17)]
chart.Correlation(df_2017_6666_subset, histogram=TRUE, method = c( "spearman"), pch=20)
df_2017_6666_subset <- df_2017_6666[,c(6,17)]
chart.Correlation(df_2017_6666_subset, histogram=TRUE, method = c( "spearman"), pch=20)
df_2017_6666_subset <- df_2017_6666[,c(6,17)]
chart.Correlation(df_2017_6666_subset, histogram=TRUE, method = c( "kendall"), pch=20)
h_y_m_2017_censo <- readRDS("../corre_ing_exp-censo/ingresos_expandidos_urbano_17.rds")
h_y_m_2017_censo <- readRDS("../corre_ing_exp-censo_casen/ingresos_expandidos_urbano_17.rds")
tablamadre <- head(h_y_m_2017_censo,50)
kbl(tablamadre) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
kable_paper() %>%
scroll_box(width = "100%", height = "300px")
x <- seq(-4, 4, length=100)
hx <- dnorm(x)
degf <- c(1, 3, 8, 30)
colors <- c("red", "blue", "darkgreen", "gold", "black")
labels <- c("df=1", "df=3", "df=8", "df=30", "normal")
plot(x, hx, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of t Distributions")
for (i in 1:4){
lines(x, dt(x,degf[i]), lwd=2, col=colors[i])
}
legend("topright", inset=.05, title="Distributions",
labels, lwd=2, lty=c(1, 1, 1, 1, 2), col=colors)
x <- seq(5, 15, length=1000)
y <- dnorm(x, mean=10, sd=3)
plot(x, y, type="l", lwd=1)
randNorm <- rnorm(300000)
#calculo de su densidad
randDensity <- dnorm(randNorm)
#gráfica
library(ggplot2)
ggplot(data.frame(x = randNorm, y = randDensity)) +
aes(x = x, y = y) +
geom_point() +
labs(x = "Random Normal Variable", y = "Densidad")
randNorm <- rnorm(30000)
#calculo de su densidad
randDensity <- dnorm(randNorm)
#gráfica
library(ggplot2)
ggplot(data.frame(x = randNorm, y = randDensity)) +
aes(x = x, y = y) +
geom_point() +
labs(x = "Random Normal Variable", y = "Densidad")
x_dgeom <- seq(0, 20, by = 1)
y_dgeom <- dgeom(x_dgeom, prob = 0.5)
plot(y_dgeom)
x_pgeom <- seq(0, 20, by = 1)
y_pgeom <- pgeom(x_dgeom, prob = 0.5)
plot(y_pgeom)
pp <- sort(c((1:9)/10, 1 - .2^(2:8)))
print(qg <- qgeom(pp, prob = .2))
## test that qgeom is an inverse of pgeom
print(qg1 <- qgeom(pgeom(qg, prob=.2), prob =.2))
all(qg == qg1)
Ni <- rgeom(20, prob = 1/4); table(factor(Ni, 0:max(Ni)))
randNorm <- rnorm(30000)
#calculo de su densidad
randDensity <- dgeom(randNorm)
randNorm <- rnorm(30000)
#calculo de su densidad
randDensity <- dnorm(randNorm)
#gráfica
library(ggplot2)
ggplot(data.frame(x = randNorm, y = randDensity)) +
aes(x = x, y = y) +
geom_point() +
labs(x = "Random Normal Variable", y = "Densidad")
N <- 10000
x <- rgeom(N, .5)
hist(x,
xlim=c(min(x),max(x)), probability=T, nclass=max(x)-min(x)+1,
col='lightblue',
main='Geometric distribution, p=.5')
lines(density(x,bw=1), col='red', lwd=3)
randNorm <- rnorm(3000)
#calculo de su densidad
randDensity <- dnorm(randNorm)
#gráfica
library(ggplot2)
ggplot(data.frame(x = randNorm, y = randDensity )) +
aes(x = x, y = y) +
geom_point(size=.5, color="#CC6666") +
labs(x = "Random Normal Variable", y = "Densidad")
N <- 10000
x <- rgeom(N, .5)
hist(x,
xlim=c(min(x),max(x)), probability=T, nclass=max(x)-min(x)+1,
col='lightblue',
main='Geometric distribution, p=.5')
lines(density(x,bw=1), col='red', lwd=1)
N <- 100000
x <- rgeom(N, .5)
hist(x,
xlim=c(min(x),max(x)), probability=T, nclass=max(x)-min(x)+1,
col='lightblue',
main='Geometric distribution, p=.5')
lines(density(x,bw=1), col='red', lwd=1)
N <- 10000
x <- rgeom(N, .9)
hist(x,
xlim=c(min(x),max(x)), probability=T, nclass=max(x)-min(x)+1,
col='lightblue',
main='Geometric distribution, p=.5')
lines(density(x,bw=1), col='red', lwd=1)
N <- 10000
x <- rgeom(N, .1)
hist(x,
xlim=c(min(x),max(x)), probability=T, nclass=max(x)-min(x)+1,
col='lightblue',
main='Geometric distribution, p=.5')
lines(density(x,bw=1), col='red', lwd=1)
N <- 10000
x <- rgeom(N, .2)
hist(x,
xlim=c(min(x),max(x)), probability=T, nclass=max(x)-min(x)+1,
col='lightblue',
main='Geometric distribution, p=.5')
lines(density(x,bw=1), col='red', lwd=1)
N <- 10000
x <- rgeom(N, .2)
hist(x,
xlim=c(min(x),max(x)), probability=T, nclass=max(x)-min(x)+1,
col='lightblue',
main='Geometric distribution, p=.2')
lines(density(x,bw=1), col='red', lwd=1)
df_2017_6666
df_2017_6666_subset <- df_2017_6666[,c(6,8,10.12,14,17)]
chart.Correlation(df_2017_6666_subset, histogram=TRUE, method = c( "kendall"), pch=20)
linearMod <- lm( multi_pob~(Freq.x) , data=h_y_m_comuna_corr_01)
summary(linearMod)
df_2017_6666_subset <- df_2017_6666[,c(3,5,7,9,11,13,15,17,19,21,28)]
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
#library(ggpubr)
library(markdown)
library(shiny)
library(shinythemes)
library(tidyverse)
library(magrittr)
library(lubridate)
#library(plotly)
library(kableExtra)
library(knitr)
library("readxl")
library(writexl)
#library(RPostgreSQL)
#library(devtools)
library(remotes)
library(DBI)
library(tidyverse)
library(kableExtra)
#library(reldist)
library("readxl")
library("writexl")
library(kableExtra)
library(PerformanceAnalytics)
library("rio")
library("dplyr")
tabla_con_clave <- readRDS("../censo_viviendas_con_clave_17.rds")
tabla_con_clave_u <- filter(tabla_con_clave, tabla_con_clave$AREA == 1)
b <- tabla_con_clave_u$COMUNA
c <- tabla_con_clave_u$P01
cross_tab =  xtabs( ~ unlist(b) + unlist(c))
tabla <- as.data.frame(cross_tab)
d <-tabla[!(tabla$Freq == 0),]
d$anio <- "2017"
d_t <- filter(d,d$unlist.c. == 1)
for(i in 2:10){
d_i <- filter(d,d$unlist.c. == i)
d_t = merge( x = d_t, y = d_i, by = "unlist.b.", all.x = TRUE)
}
# Agregamos un cero a los códigos comunales de 4 dígitos, que queda en la columna llamada **código**:
codigos <- d_t$unlist.b.
rango <- seq(1:nrow(d_t))
cadena <- paste("0",codigos[rango], sep = "")
cadena <- substr(cadena,(nchar(cadena)[rango])-(4),6)
codigos <- as.data.frame(codigos)
cadena <- as.data.frame(cadena)
comuna_corr <- cbind(d_t,cadena)
comuna_corr <- comuna_corr[,-c(1),drop=FALSE]
names(comuna_corr)[31] <- "código"
comuna_corr <- comuna_corr[,-c(3,6,9,12,15,18,21,24,27),drop=FALSE]
names(comuna_corr )[2] <- "Casa"
names(comuna_corr )[4] <- "Departamento en edificio"
names(comuna_corr )[6] <- "Vivienda tradicional indígena"
names(comuna_corr )[8] <- "Pieza en casa antigua o en conventillo"
names(comuna_corr )[10] <- "Mediagua, mejora, rancho o choza"
names(comuna_corr )[12] <- "(carpa, casa rodante o similar)"
names(comuna_corr )[14] <- "Otro tipo de vivienda particular"
names(comuna_corr )[16] <- "Vivienda colectiva"
names(comuna_corr )[18] <- "Operativo personas en tránsito (no es vivienda)"
names(comuna_corr )[20] <- "Operativo calle (no es vivienda)"
names(comuna_corr )[21] <- "año"
kbl(head(comuna_corr,50)) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
kable_paper() %>%
scroll_box(width = "100%", height = "300px")
casen_2017 <- readRDS(file = "../casen_2017_c.rds")
casen_2017_u <- filter(casen_2017, casen_2017$zona == "Urbano")
casen_2017_u <- casen_2017_u[!is.na(casen_2017_u$ytotcor),]
Q <- quantile(casen_2017_u$ytotcor, probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(casen_2017_u$ytotcor)
casen_2017_sin_o <- subset(casen_2017_u, casen_2017_u$ytotcor >
(Q[1] - 1.5*iqr) &
casen_2017_u$ytotcor < (Q[2]+1.5*iqr))
casen_2017_sin_o <- data.frame(lapply(casen_2017_sin_o, as.character),
stringsAsFactors=FALSE)
b <-  as.numeric(casen_2017_sin_o$ytotcor)
a <- casen_2017_sin_o$comuna
promedios_grupales <-aggregate(b, by=list(a), FUN = mean , na.rm=TRUE )
names(promedios_grupales)[1] <- "comuna"
names(promedios_grupales)[2] <- "promedio_i"
promedios_grupales$año <- "2017"
codigos_comunales <- readRDS(file = "../codigos_comunales_2011-2017.rds")
names(codigos_comunales)[1] <- "código"
names(codigos_comunales)[2] <- "comuna"
df_2017 = merge( x = promedios_grupales, y = codigos_comunales,
by = "comuna",
all.x = TRUE)
saveRDS(df_2017,"Ingresos_expandidos_Urbano_17.rds")
#Hacemos la unión con los ingresos promedio comunales expandidos:
ingresos_expandidos_2017 <- readRDS("Ingresos_expandidos_urbano_17.rds")
df_2017_2 = merge( x = comuna_corr, y = ingresos_expandidos_2017, by = "código", all.x = TRUE)
kbl(head(df_2017_2,50)) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
kable_paper() %>%
scroll_box(width = "100%", height = "300px")
x <- import("../Microdato_Censo2017-Personas.csv")
my_summary_data <- x %>%
group_by(x$COMUNA) %>%
summarise(Count = n())
names(my_summary_data)[1] <- "comuna"
names(my_summary_data)[2] <- "personas"
# recogemos el campo Comuna:
codigos <- my_summary_data$comuna
# construimos una secuencia llamada rango del 1 al total de filas del
# dataset:
rango <- seq(1:nrow(my_summary_data))
# Creamos un string que agrega un cero a todos los registros:
cadena <- paste("0",codigos[rango], sep = "")
# El string cadena tiene o 5 o 6 digitos, los cuales siempre deben ser
# siempre 5
# agregandole un cero al inicio de los que tienen 4.
# Para ello extraemos un substring de la cadena sobre todas las filas
#(rangos)
# comenzando desde el primero o el segundo y llegando siempre al 6.
cadena <- substr(cadena,(nchar(cadena)[rango])-(4),6)
codigos <- as.data.frame(codigos)
cadena <- as.data.frame(cadena)
comuna_corr <- cbind(my_summary_data,cadena)
names(comuna_corr)[3] <- "código"
saveRDS(comuna_corr,"cant_personas_17.rds")
df_2017_6666 = merge( x = df_2017_2, y = comuna_corr, by = "código", all.x = TRUE)
df_2017_6666$Ingresos_expandidos <- df_2017_6666$promedio_i*df_2017_6666$personas
df_2017_6666 <- filter(df_2017_6666, df_2017_6666$Ingresos_expandidos != 'is.na')
df_2017_6666_subset <- df_2017_6666[,c(3,5,7,9,11,13,15,17,19,21,28)]
chart.Correlation(df_2017_6666_subset, histogram=TRUE, method = c( "pearson"), pch=20)
randNorm <- rnorm(3000)
#calculo de su densidad
randDensity <- dnorm(randNorm)
#gráfica
library(ggplot2)
ggplot(data.frame(x = randNorm, y = randDensity )) +
aes(x = x, y = y) +
geom_point(size=.5, color="#CC6666") +
labs(x = "Random Normal Variable", y = "Densidad")
N <- 10000
x <- rgeom(N, .2)
hist(x,
xlim=c(min(x),max(x)), probability=T, nclass=max(x)-min(x)+1,
col='#117a65',
main='Geometric distribution, p=.2')
lines(density(x,bw=1), col='red', lwd=1)
df_2017_6666_subset <- df_2017_6666[,c(3,5,7,9,11,13,15,17,19,21,28)]
chart.Correlation(df_2017_6666_subset, histogram=TRUE, method = c( "kendall"), pch=20)
tabla_con_clave <- readRDS("../censo_viviendas_con_clave_17.rds")
tabla_con_clave_u <- filter(tabla_con_clave, tabla_con_clave$AREA == 2)
b <- tabla_con_clave_u$COMUNA
c <- tabla_con_clave_u$P01
cross_tab =  xtabs( ~ unlist(b) + unlist(c))
tabla <- as.data.frame(cross_tab)
d <-tabla[!(tabla$Freq == 0),]
d$anio <- "2017"
d_t <- filter(d,d$unlist.c. == 1)
for(i in 2:10){
d_i <- filter(d,d$unlist.c. == i)
d_t = merge( x = d_t, y = d_i, by = "unlist.b.", all.x = TRUE)
}
# Agregamos un cero a los códigos comunales de 4 dígitos, que queda en la columna llamada **código**:
codigos <- d_t$unlist.b.
rango <- seq(1:nrow(d_t))
cadena <- paste("0",codigos[rango], sep = "")
cadena <- substr(cadena,(nchar(cadena)[rango])-(4),6)
codigos <- as.data.frame(codigos)
cadena <- as.data.frame(cadena)
comuna_corr <- cbind(d_t,cadena)
comuna_corr <- comuna_corr[,-c(1),drop=FALSE]
names(comuna_corr)[31] <- "código"
comuna_corr <- comuna_corr[,-c(3,6,9,12,15,18,21,24,27),drop=FALSE]
names(comuna_corr )[2] <- "Casa"
names(comuna_corr )[4] <- "Departamento en edificio"
names(comuna_corr )[6] <- "Vivienda tradicional indígena"
names(comuna_corr )[8] <- "Pieza en casa antigua o en conventillo"
names(comuna_corr )[10] <- "Mediagua, mejora, rancho o choza"
names(comuna_corr )[12] <- "(carpa, casa rodante o similar)"
names(comuna_corr )[14] <- "Otro tipo de vivienda particular"
names(comuna_corr )[16] <- "Vivienda colectiva"
names(comuna_corr )[18] <- "Operativo personas en tránsito (no es vivienda)"
names(comuna_corr )[20] <- "Operativo calle (no es vivienda)"
names(comuna_corr )[21] <- "año"
casen_2017 <- readRDS(file = "../casen_2017_c.rds")
casen_2017_u <- filter(casen_2017, casen_2017$zona == "Rural")
casen_2017_u <- casen_2017_u[!is.na(casen_2017_u$ytotcor),]
Q <- quantile(casen_2017_u$ytotcor, probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(casen_2017_u$ytotcor)
casen_2017_sin_o <- subset(casen_2017_u, casen_2017_u$ytotcor >
(Q[1] - 1.5*iqr) &
casen_2017_u$ytotcor < (Q[2]+1.5*iqr))
casen_2017_sin_o <- data.frame(lapply(casen_2017_sin_o, as.character),
stringsAsFactors=FALSE)
b <-  as.numeric(casen_2017_sin_o$ytotcor)
a <- casen_2017_sin_o$comuna
promedios_grupales <-aggregate(b, by=list(a), FUN = mean , na.rm=TRUE )
names(promedios_grupales)[1] <- "comuna"
names(promedios_grupales)[2] <- "promedio_i"
promedios_grupales$año <- "2017"
codigos_comunales <- readRDS(file = "../codigos_comunales_2011-2017.rds")
names(codigos_comunales)[1] <- "código"
names(codigos_comunales)[2] <- "comuna"
df_2017 = merge( x = promedios_grupales, y = codigos_comunales,
by = "comuna",
all.x = TRUE)
saveRDS(df_2017,"Ingresos_expandidos_Rural_17.rds")
#Hacemos la unión con los ingresos promedio comunales expandidos:
ingresos_expandidos_2017 <- readRDS("Ingresos_expandidos_urbano_17.rds")
df_2017_2 = merge( x = comuna_corr, y = ingresos_expandidos_2017, by = "código", all.x = TRUE)
x <- import("../Microdato_Censo2017-Personas.csv")
my_summary_data <- x %>%
group_by(x$COMUNA) %>%
summarise(Count = n())
names(my_summary_data)[1] <- "comuna"
names(my_summary_data)[2] <- "personas"
# recogemos el campo Comuna:
codigos <- my_summary_data$comuna
# construimos una secuencia llamada rango del 1 al total de filas del
# dataset:
rango <- seq(1:nrow(my_summary_data))
# Creamos un string que agrega un cero a todos los registros:
cadena <- paste("0",codigos[rango], sep = "")
# El string cadena tiene o 5 o 6 digitos, los cuales siempre deben ser
# siempre 5
# agregandole un cero al inicio de los que tienen 4.
# Para ello extraemos un substring de la cadena sobre todas las filas
#(rangos)
# comenzando desde el primero o el segundo y llegando siempre al 6.
cadena <- substr(cadena,(nchar(cadena)[rango])-(4),6)
codigos <- as.data.frame(codigos)
cadena <- as.data.frame(cadena)
comuna_corr <- cbind(my_summary_data,cadena)
names(comuna_corr)[3] <- "código"
saveRDS(comuna_corr,"cant_personas_17.rds")
df_2017_6666 = merge( x = df_2017_2, y = comuna_corr, by = "código", all.x = TRUE)
df_2017_6666$Ingresos_expandidos <- df_2017_6666$promedio_i*df_2017_6666$personas
df_2017_6666 <- filter(df_2017_6666, df_2017_6666$Ingresos_expandidos != 'is.na')
df_2017_6666_subset <- df_2017_6666[,c(3,5,7,9,11,13,15,17,19,21,28)]
chart.Correlation(df_2017_6666_subset, histogram=TRUE, method = c( "kendall"), pch=20)
